# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'Console log':
    'prefix': 'cons'
    'body': "console.log('$1');$2"
  'Console log':
    'prefix': '$l'
    'body': "console.log('$1');$2"
  'Console error':
    'prefix': '$e'
    'body': "console.error('$1');$2"
  'Arrow function':
    'prefix': '$a'
    'body': """
      ($1) => {
        $2
      };
    """
  'Anonymous function':
    'prefix': '$f'
    'body': """
      function($1) {
        $2
      };
    """
  'Define function':
    'prefix': 'def'
    'body': """
      const $1 = ($2) => {
        $3
      };
    """
  'Use strict':
    'prefix': '$u'
    'body': "'use strict';$1"
  'Import statement':
    'prefix': 'import'
    'body': "import $1 from '$2';$3"
  'Selective import statement':
    'prefix': 'imports'
    'body': "import { $1 } from '$2';$3"
  'Import all statement':
    'prefix': 'importa'
    'body': "import * as $1 from '$2';$3"

  'Class statement':
    'prefix': 'class'
    'body': """
      class $1 {
        $2
      }
    """
  'Class statement with extends':
    'prefix': 'classe'
    'body': """
      class $1 extends $2 {
        $3
      }
    """
  'For statement':
    'prefix': 'for'
    'body': """
      for (let i = ${1: 0}; i < $2; i += 1) {
        $3
      }
    """
  'While statement':
    'prefix': 'while'
    'body': """
      while ($1) {
        $2
      }
    """
  'If statement':
    'prefix': 'if'
    'body': """
      if ($1) {
        $2
      }
    """
  'If else statement':
    'prefix': 'ife'
    'body': """
      if ($1) {
        $2
      }
      else {
        $3
      }
    """
  'If else if statement':
    'prefix': 'ifei'
    'body': """
      if ($1) {
        $2
      }
      else if ($3) {
        $4
      }
    """
  'Switch statement':
    'prefix': 'switch'
    'body': """
      switch($1) {
        $3
      }
    """
  'Case statement':
    'prefix': 'case'
    'body': """
      case: $1: {
        ${2:return;}
      }
    """
  'Default statement':
    'prefix': 'default'
    'body': """
      default: {
        ${1:return;}
      }
    """

  # React

  'Container (smart component)':
    'prefix': '$container'
    'body': """
      export class $1 extends Component {
        render() {
          return (
            ${2:<div></div>}
          );
        }
      }

      export default connect(${1:mapStateToProps}, ${2:mapDispatchToProps})($3);
    """
  'Class component':
    'prefix': '$component'
    'body': """
      export default class $1 extends Component {
        render() {
          return (
            ${2:<div></div>}
          );
        }
      }

      $1.propTypes = {
        $3
      };
    """
  'Action':
    'prefix': '$action'
    'body': """
      const $1 = ($2) => {
        return {
          type: $3
        };
      };
    """
  'Thunk action':
    'prefix': '$taction'
    'body': """
      const $1 = ($2) => (dispatch) => {
        dispatch({
          type: $3
        });
      };
    """
  'Reducer':
    'prefix': '$reducer'
    'body': """
       const $1 = (${2:state}, action) => {
         switch ($3) {
           $4
         }
       };
    """
